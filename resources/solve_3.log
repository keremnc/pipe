/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/bin/java -Didea.launcher.port=7538 "-Didea.launcher.bin.path=/Applications/IntelliJ IDEA CE.app/Contents/bin" -Dfile.encoding=UTF-8 -classpath "/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/lib/tools.jar:/Users/kc/code/pipe/out/production/pipe:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar" com.intellij.rt.execution.application.AppMain Pipeline

                              Welcome to Pipeline!


+--------------------------------------------------------------------------+
|                  AVAILABLE COMMANDS:                                     |
+--------------------------------------------------------------------------+
| #  Description                           Parameters (If applicable)      |
+--------------------------------------------------------------------------+
| 1. Load graph from a file                [filename]                      |
| 2. Add a pipe to the graph               [source, destination, capacity] |
| 3. Remove a pipe from the graph          [source, destination]           |
| 4. Undo previous removal(s)                                              |
| 5. Prints adjacency list                                                 |
| 6. Displays graph with BFS or DFS        [<(D)FS | (B)FS>, start joint]  |
| 7. Calculate & display max flow network  [source, sink]                  |
| 8. Save solved flow network to disk      [filename]                      |
| 9. Save graph to file                    [filename]                      |
+--------------------------------------------------------------------------+

> Select command:
Unrecognized number...

+--------------------------------------------------------------------------+
|                  AVAILABLE COMMANDS:                                     |
+--------------------------------------------------------------------------+
| #  Description                           Parameters (If applicable)      |
+--------------------------------------------------------------------------+
| 1. Load graph from a file                [filename]                      |
| 2. Add a pipe to the graph               [source, destination, capacity] |
| 3. Remove a pipe from the graph          [source, destination]           |
| 4. Undo previous removal(s)                                              |
| 5. Prints adjacency list                                                 |
| 6. Displays graph with BFS or DFS        [<(D)FS | (B)FS>, start joint]  |
| 7. Calculate & display max flow network  [source, sink]                  |
| 8. Save solved flow network to disk      [filename]                      |
| 9. Save graph to file                    [filename]                      |
+--------------------------------------------------------------------------+

> Select command:
Unrecognized number...

+--------------------------------------------------------------------------+
|                  AVAILABLE COMMANDS:                                     |
+--------------------------------------------------------------------------+
| #  Description                           Parameters (If applicable)      |
+--------------------------------------------------------------------------+
| 1. Load graph from a file                [filename]                      |
| 2. Add a pipe to the graph               [source, destination, capacity] |
| 3. Remove a pipe from the graph          [source, destination]           |
| 4. Undo previous removal(s)                                              |
| 5. Prints adjacency list                                                 |
| 6. Displays graph with BFS or DFS        [<(D)FS | (B)FS>, start joint]  |
| 7. Calculate & display max flow network  [source, sink]                  |
| 8. Save solved flow network to disk      [filename]                      |
| 9. Save graph to file                    [filename]                      |
+--------------------------------------------------------------------------+

> Select command: gs
Unrecognized number...

+--------------------------------------------------------------------------+
|                  AVAILABLE COMMANDS:                                     |
+--------------------------------------------------------------------------+
| #  Description                           Parameters (If applicable)      |
+--------------------------------------------------------------------------+
| 1. Load graph from a file                [filename]                      |
| 2. Add a pipe to the graph               [source, destination, capacity] |
| 3. Remove a pipe from the graph          [source, destination]           |
| 4. Undo previous removal(s)                                              |
| 5. Prints adjacency list                                                 |
| 6. Displays graph with BFS or DFS        [<(D)FS | (B)FS>, start joint]  |
| 7. Calculate & display max flow network  [source, sink]                  |
| 8. Save solved flow network to disk      [filename]                      |
| 9. Save graph to file                    [filename]                      |
+--------------------------------------------------------------------------+

> Select command: g
Unrecognized number...

+--------------------------------------------------------------------------+
|                  AVAILABLE COMMANDS:                                     |
+--------------------------------------------------------------------------+
| #  Description                           Parameters (If applicable)      |
+--------------------------------------------------------------------------+
| 1. Load graph from a file                [filename]                      |
| 2. Add a pipe to the graph               [source, destination, capacity] |
| 3. Remove a pipe from the graph          [source, destination]           |
| 4. Undo previous removal(s)                                              |
| 5. Prints adjacency list                                                 |
| 6. Displays graph with BFS or DFS        [<(D)FS | (B)FS>, start joint]  |
| 7. Calculate & display max flow network  [source, sink]                  |
| 8. Save solved flow network to disk      [filename]                      |
| 9. Save graph to file                    [filename]                      |
+--------------------------------------------------------------------------+

> Select command:
Unrecognized number...

+--------------------------------------------------------------------------+
|                  AVAILABLE COMMANDS:                                     |
+--------------------------------------------------------------------------+
| #  Description                           Parameters (If applicable)      |
+--------------------------------------------------------------------------+
| 1. Load graph from a file                [filename]                      |
| 2. Add a pipe to the graph               [source, destination, capacity] |
| 3. Remove a pipe from the graph          [source, destination]           |
| 4. Undo previous removal(s)                                              |
| 5. Prints adjacency list                                                 |
| 6. Displays graph with BFS or DFS        [<(D)FS | (B)FS>, start joint]  |
| 7. Calculate & display max flow network  [source, sink]                  |
| 8. Save solved flow network to disk      [filename]                      |
| 9. Save graph to file                    [filename]                      |
+--------------------------------------------------------------------------+

> Select command: a
Unrecognized number...

+--------------------------------------------------------------------------+
|                  AVAILABLE COMMANDS:                                     |
+--------------------------------------------------------------------------+
| #  Description                           Parameters (If applicable)      |
+--------------------------------------------------------------------------+
| 1. Load graph from a file                [filename]                      |
| 2. Add a pipe to the graph               [source, destination, capacity] |
| 3. Remove a pipe from the graph          [source, destination]           |
| 4. Undo previous removal(s)                                              |
| 5. Prints adjacency list                                                 |
| 6. Displays graph with BFS or DFS        [<(D)FS | (B)FS>, start joint]  |
| 7. Calculate & display max flow network  [source, sink]                  |
| 8. Save solved flow network to disk      [filename]                      |
| 9. Save graph to file                    [filename]                      |
+--------------------------------------------------------------------------+

> Select command: 1
Load graph :> Enter filename (Leave blank to cancel): resources/TeamProInput1

Pipe {New York City->Newark (10.0)} added!
Pipe {New York City->Jersey City (20.0)} added!
Pipe {Newark->Jersey City (2.0)} added!
Pipe {Newark->Yonkers (9.0)} added!
Pipe {Jersey City->Paterson (21.0)} added!
Pipe {Jersey City->Yonkers (1.0)} added!
Pipe {Yonkers->Paterson (10.0)} added!
Pipe {Yonkers->Edison (7.0)} added!
Pipe {Paterson->Edison (8.0)} added!
Pipe {Paterson->New Rochelle (9.0)} added!
Pipe {Edison->New Rochelle (5.0)} added!
Pipe {Edison->Mount Vernon (21.0)} added!
Pipe {New Rochelle->Mount Vernon (21.0)} added!
Pipe {New Rochelle->Union (19.0)} added!
Pipe {Mount Vernon->Union (19.0)} added!
Pipe {Mount Vernon->Wayne (15.0)} added!
Pipe {Union->Wayne (15.0)} added!
Success: Successfully loaded graph!

> Select command: 7
Solve graph :> Enter source (Leave blank to cancel): New York City
Solve graph :> Enter sink (Leave blank to cancel): Wayne

New York City->Jersey City (18.0/20.0) 90.00% capacity
New York City->Newark (6.0/10.0) 60.00% capacity
Jersey City->Paterson (17.0/21.0) 80.95% capacity
Jersey City->Yonkers (1.0/1.0) 100.00% capacity
Paterson->Edison (8.0/8.0) 100.00% capacity
Paterson->New Rochelle (9.0/9.0) 100.00% capacity
Mount Vernon->Wayne (15.0/15.0) 100.00% capacity
Mount Vernon->Union (9.0/19.0) 47.37% capacity
Yonkers->Paterson (0.0/10.0) 0.00% capacity
Yonkers->Edison (7.0/7.0) 100.00% capacity
Edison->Mount Vernon (15.0/21.0) 71.43% capacity
Edison->New Rochelle (0.0/5.0) 0.00% capacity
Newark->Jersey City (0.0/2.0) 0.00% capacity
Newark->Yonkers (6.0/9.0) 66.67% capacity
New Rochelle->Mount Vernon (9.0/21.0) 42.86% capacity
New Rochelle->Union (0.0/19.0) 0.00% capacity
Union->Wayne (9.0/15.0) 60.00% capacity
Max flow: 24.0

> Select command: 8
Save solution :> Enter filename (Leave blank to cancel): resources/Solution1

Success: Saved flow network to 'resources/Solution1'

> Select command: 1
Load graph :> Enter filename (Leave blank to cancel): resources/TeamProInput2

Pipe {Sacramento->SanFrancisco (2000.0)} added!
Pipe {Sacramento->LosAngeles (1000.0)} added!
Pipe {Sacramento->Oakland (800.0)} added!
Pipe {SanFrancisco->LosAngeles (1000.0)} added!
Pipe {SanFrancisco->SanJose (1500.0)} added!
Pipe {LosAngeles->Oakland (100.0)} added!
Pipe {LosAngeles->SanJose (3000.0)} added!
Pipe {Oakland->SanJose (1000.0)} added!
Pipe {SanJose->SantaBarbara (2000.0)} added!
Pipe {SanJose->SantaMonica (1000.0)} added!
Pipe {SanJose->PalmSprings (500.0)} added!
Pipe {SanJose->LongBeach (1000.0)} added!
Pipe {SantaBarbara->Irvine (400.0)} added!
Pipe {SantaMonica->SantaBarbara (100.0)} added!
Pipe {SantaMonica->Irvine (3000.0)} added!
Pipe {PalmSprings->SantaRosa (2000.0)} added!
Pipe {LongBeach->PalmSprings (80.0)} added!
Pipe {LongBeach->SantaRosa (1000.0)} added!
Pipe {Irvine->San Diego (5000.0)} added!
Pipe {SantaRosa->Irvine (1000.0)} added!
Pipe {SantaRosa->SanDiego (2000.0)} added!
Success: Successfully loaded graph!

> Select command: 8
Save solution :> Enter filename (Leave blank to cancel):

> Select command: 7
Solve graph :> Enter source (Leave blank to cancel): Sacramento
Solve graph :> Enter sink (Leave blank to cancel): SanDiego

SanFrancisco->LosAngeles (1000.0/1000.0) 100.00% capacity
SanFrancisco->SanJose (500.0/1500.0) 33.33% capacity
Sacramento->SanFrancisco (1500.0/2000.0) 75.00% capacity
Sacramento->LosAngeles (0.0/1000.0) 0.00% capacity
Sacramento->Oakland (0.0/800.0) 0.00% capacity
SantaRosa->SanDiego (1500.0/2000.0) 75.00% capacity
SantaRosa->Irvine (0.0/1000.0) 0.00% capacity
SanJose->PalmSprings (500.0/500.0) 100.00% capacity
SanJose->LongBeach (1000.0/1000.0) 100.00% capacity
SanJose->SantaMonica (0.0/1000.0) 0.00% capacity
SanJose->SantaBarbara (0.0/2000.0) 0.00% capacity
Oakland->SanJose (0.0/1000.0) 0.00% capacity
SantaBarbara->Irvine (0.0/400.0) 0.00% capacity
PalmSprings->SantaRosa (580.0/2000.0) 29.00% capacity
LongBeach->PalmSprings (80.0/80.0) 100.00% capacity
LongBeach->SantaRosa (920.0/1000.0) 92.00% capacity
SantaMonica->Irvine (0.0/3000.0) 0.00% capacity
SantaMonica->SantaBarbara (0.0/100.0) 0.00% capacity
LosAngeles->SanJose (1000.0/3000.0) 33.33% capacity
LosAngeles->Oakland (0.0/100.0) 0.00% capacity
Irvine->San Diego (0.0/5000.0) 0.00% capacity
Max flow: 1500.0

> Select command: 8
Save solution :> Enter filename (Leave blank to cancel): resources/Solution2

Success: Saved flow network to 'resources/Solution2'

> Select command: 1
Load graph :> Enter filename (Leave blank to cancel): resources/TeamProInput3

Pipe {San Francisco->Bayshore (1000.0)} added!
Pipe {San Francisco->San Bruno (1000.0)} added!
Pipe {San Francisco->San Mateo (1000.0)} added!
Pipe {San Francisco->Hilsdale (1000.0)} added!
Pipe {Bayshore->Belmont (50.0)} added!
Pipe {Bayshore->Atherton (100.0)} added!
Pipe {San Bruno->Atherton (200.0)} added!
Pipe {San Bruno->Palo Alto (100.0)} added!
Pipe {San Mateo->Palo Alto (70.0)} added!
Pipe {San Mateo->Mountain View (80.0)} added!
Pipe {Hillsdale->Belmont (210.0)} added!
Pipe {Hillsdale->Mountain View (60.0)} added!
Pipe {Belmont->Sunnyvale (1000.0)} added!
Pipe {Atherton->Sunnyvale (1000.0)} added!
Pipe {Palo Alto->Sunnyvale (1000.0)} added!
Pipe {Mountain View->Sunnyvale (1000.0)} added!
Success: Successfully loaded graph!

> Select command: 7
Solve graph :> Enter source (Leave blank to cancel): San Francisco
Solve graph :> Enter sink (Leave blank to cancel): Sunnyvale

San Francisco->San Bruno (300.0/1000.0) 30.00% capacity
San Francisco->Bayshore (150.0/1000.0) 15.00% capacity
San Francisco->San Mateo (150.0/1000.0) 15.00% capacity
San Francisco->Hilsdale (0.0/1000.0) 0.00% capacity
Hillsdale->Belmont (0.0/210.0) 0.00% capacity
Hillsdale->Mountain View (0.0/60.0) 0.00% capacity
Palo Alto->Sunnyvale (170.0/1000.0) 17.00% capacity
San Bruno->Palo Alto (100.0/100.0) 100.00% capacity
San Bruno->Atherton (200.0/200.0) 100.00% capacity
Belmont->Sunnyvale (50.0/1000.0) 5.00% capacity
Bayshore->Belmont (50.0/50.0) 100.00% capacity
Bayshore->Atherton (100.0/100.0) 100.00% capacity
Atherton->Sunnyvale (300.0/1000.0) 30.00% capacity
San Mateo->Palo Alto (70.0/70.0) 100.00% capacity
San Mateo->Mountain View (80.0/80.0) 100.00% capacity
Mountain View->Sunnyvale (80.0/1000.0) 8.00% capacity
Max flow: 600.0

> Select command: 7
Solve graph :> Enter source (Leave blank to cancel):

> Select command: 8
Save solution :> Enter filename (Leave blank to cancel): resources/Solution3

Success: Saved flow network to 'resources/Solution3'

> Select command: q
Bye bye!

Process finished with exit code 0
